<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Greg Babiars]]></title>
  <link href="http://gbabiars.github.io/atom.xml" rel="self"/>
  <link href="http://gbabiars.github.io/"/>
  <updated>2013-11-29T11:27:36-07:00</updated>
  <id>http://gbabiars.github.io/</id>
  <author>
    <name><![CDATA[Greg Babiars]]></name>
    <email><![CDATA[gbabiars@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Formatted Text Fields in Ember.js]]></title>
    <link href="http://gbabiars.github.io/blog/2013/11/29/formatted-text-fields-in-ember-dot-js/"/>
    <updated>2013-11-29T08:11:00-07:00</updated>
    <id>http://gbabiars.github.io/blog/2013/11/29/formatted-text-fields-in-ember-dot-js</id>
    <content type="html"><![CDATA[<p>A common need in most applications is custom text fields which display a formatted value.  These can be date pickers, formatted numbers or one of many other uses.  Often times there are existing libraries we can leverage to do the work for us, but one problem we still have is getting the unformated back into our application.  We can work around this by following a very reusable pattern in custom views.</p>

<h3>Binding directly to the value</h3>

<p>With Em.TextField, we usually just bind a property our controller to the value property of the view, such as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{view Em.TextField valueBinding=&quot;currency&quot;}}
</span></code></pre></td></tr></table></div></figure>


<p>This works great because every time our value changes, our currency property gets updated.  However, let&rsquo;s say we want to display money with a currency symbol, but we want our value to save as the raw number without any currency symbol.  We&rsquo;ll extend the text field and do this exactly as we did before:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{view Em.CurrencyField valueBinding=&quot;currency&quot;}}
</span></code></pre></td></tr></table></div></figure>


<p>Before going into the view code, we&rsquo;ll just assume that it formats the value.  The problem is when we change the value on the view, our currency property will have that formatted value.</p>

<h3>Passing in a reference instead of binding</h3>

<p>While we could add some logic into our controller to handle this, we could end up having to rewrite the same code in multiple spots if we plan on reusing this field throughout our application.  A better way to do this is allow the view to handle the formatting and unformatting of the currency value.  To do this, we will pass in a reference to our currency value to the view, but we won&rsquo;t bind it to the value property.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{view Em.CurrencyField currencyBinding=&quot;currency&quot;}}
</span></code></pre></td></tr></table></div></figure>


<p>Here we are binding the currency property on our controller to the currency property on the view instead of value.  To wire all this up, here is our custom view:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">CurrencyField</span><span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nx">TextField</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">accounting</span><span class="p">.</span><span class="nx">formatMoney</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;currency&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">updateCurrency</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">currency</span> <span class="o">=</span> <span class="nx">accounting</span><span class="p">.</span><span class="nx">unformat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;currency&quot;</span><span class="p">,</span> <span class="nx">currency</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">observes</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s walk through what is going on here.  First, we are extending Em.TextField to get all of the existing logic there.<br/>
Next, we override the init method.  In here we are formatting the currency passed in and setting the value, which will be displayed.  The reason we are doing this in the init instead of didInsertElement is because we don&rsquo;t want to trigger a change on the value property.  If you are wiring up a field that uses a jQuery plugin, you likely could avoid this and do that setup in the didInsertElement method.
In order to respond to changes of the input and get the unformatted value back to the currency property on our controller, we add the updateCurrency method which observes the value property of our view.  In here we unformat the currency and set it to the currency property on our view, which is bound to the currency property on our controller.  Now we are in full control of what format our currency is stored in within our application and not dependent on a 3rd party library&rsquo;s format.</p>

<h3>One more thing</h3>

<p>Hopefully this helps you see how easy it is to create custom text fields in which we have full control over the format in which our bound value is output in.  One more trick I have learned is to create a Handlebars helper for our view.  We can do this with one line:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Em</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helper</span><span class="p">(</span><span class="s2">&quot;currency-field&quot;</span><span class="p">,</span> <span class="nx">App</span><span class="p">.</span><span class="nx">CurrencyField</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The benefit of this is that we are able to make our template more readable by replacing what we had above with the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{currency-field currency=currency}}
</span></code></pre></td></tr></table></div></figure>


<p>This helps reduce the noise in our template.</p>

<p>You can see a full example of this code <a href="http://emberjs.jsbin.com/uYiRale/8/edit">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding {{this}} scoping in Ember Handlebars {{each}} blocks]]></title>
    <link href="http://gbabiars.github.io/blog/2013/11/26/understanding-this-scoping-in-ember-handlebars-each-blocks/"/>
    <updated>2013-11-26T05:30:00-07:00</updated>
    <id>http://gbabiars.github.io/blog/2013/11/26/understanding-this-scoping-in-ember-handlebars-each-blocks</id>
    <content type="html"><![CDATA[<p>One of the more confusing parts of using Ember is understanding how <code>{{this}}</code> is scoped within an <code>{{each}}</code> block in your templates.  The reason this can be so confusing is because the scope of the  block can change depending on what you are iterating over and how your controller is set up.  I will cover the three main use cases and discuss what <code>{{this}}</code> resolves to in each.</p>

<h3>Case 1: {{#each model}}</h3>

<p>This is the simplest case in which we are iterating over an array without explicity declaring what our variable name is.  The template will look like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>{{#each model}}
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>{{this.name}} - {{controller.message}}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>{{/each}}
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our controller will look like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PersonController</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nx">ArrayController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;John Doe&#39;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Bob Jones&#39;</span> <span class="p">}</span>          
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, <code>{{this}}</code> will be set to the current person in the list that is being iterated over.  The big thing to note here is that our context has changed from outside of our each block, where the context typically is the controller.  We can still access the controller inside the each block by using <code>{{controller}}</code>.  Note that we put <code>{{#each model}}</code>, but we could have used <code>{{#each controller}}</code> as well since we have an ArrayController which proxies the model property.  In a later case we&rsquo;ll see where this is an issue.</p>

<h3>Case 2: {{#each person in model}}</h3>

<p>In this instance we are explicity declaring the name of the current item.  Our template will look like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>{{#each person in model}}
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>{{person.name}} - {{message}}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>{{/each}}
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our controller is exactly the same as Case 1.  The difference here is that {{this}} in our {{each}} block is going to be the same as our context outside of our each block, which is typically our controller.  So we can display properties on the controller in our loop without having to explicitly say they are coming from the controller.  This is my prefered method of displaying a list of items because it avoids a context switch which makes it more difficult to read.</p>

<h3>Case 3: {{#each controller}} with itemController</h3>

<p>In our last case, our template will be very similar to Case 1, with the exception that we will use an itemController.  The template will look like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>{{#each controller}}
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>{{this.name}} - {{parentController.message}} - {{selected}}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>{{/each}}
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our controller and itemController will look like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PersonController</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nx">ArrayController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">itemController</span><span class="o">:</span> <span class="s1">&#39;personItem&#39;</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;John Doe&#39;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Bob Jones&#39;</span> <span class="p">}</span>          
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">PersonItemController</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">selected</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;John Doe&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The big difference with this is that we are able to add controller logic to each item in the list.  This is often important because we don&rsquo;t want to put transient data in our model, but we doesn&rsquo;t make sense in the list controller.  Another important thing to note here is that <code>{{controller}}</code> is set to our itemController and the controller outside of our each block.  To access this, we can use <code>{{parentController}}</code> which is automatically set on an itemController.</p>

<h3>Summary</h3>

<p>As you can see, each blocks in Ember templates can be confusing because of the variable context.  Understanding how this scoping works goes a long way to being able to select the one that fits your use case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Maintainable JavaScript]]></title>
    <link href="http://gbabiars.github.io/blog/2013/10/02/book-review-maintainable-javascript/"/>
    <updated>2013-10-02T20:50:00-07:00</updated>
    <id>http://gbabiars.github.io/blog/2013/10/02/book-review-maintainable-javascript</id>
    <content type="html"><![CDATA[<p>After hearing Nicholas Zakas&#8217; great interview on <a href="http://javascriptjabber.com/075-jsj-maintainable-javascript-with-nicholas-zakas/">JavaScript Jabber</a> I finally read his book <a href="http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680">Maintainable JavaScript</a>.  The book is an excellent read for any level of developer and has great tips that are mostly non-technical.  The book is broken down into three sections: Style Guidelines, Programming Practices and Automation.</p>

<h3>Part I: Style Guidelines</h3>

<p>Nicholas gives reasoning for having a style guidelines based on his past experiences and specific examples of how they can help.  The most amazing thing about this section is that he managed to stay very unbias in a part of programming that most people become religious about.  The level headed advice in this section is something any organization can take in and use.</p>

<h3>Part II: Programming Practices</h3>

<p>I was surprised on how many little things I picked up from this section.  What I really enjoyed was that he explained why and not just how you should do and not do certain practices.  Not only does he highlight bad practices, but gives several solutions to overcome them.  This was my favorite section by far.</p>

<h3>Part III: Automation</h3>

<p>While the rest of the book was pretty unbiased and neutral to technologies outside of JavaScript, this section was much more geared towards a Java backend.  While the concepts in this section still hold, the detailed examples are not very useful unless you are using or willing to use Ant.  I ended up skipping past much of this section, knowing that I could accomplish much of it in Grunt.</p>

<p>There were also two appendices: an example style guide and a list of tools.  Both of these are good references.</p>

<p>Overall, Maintainable JavaScript is a nice quick read with really good insights that not only help you write better JavaScript, but help your entire team to work together to create a maintainable codebase.  I highly recommend it, even if just for the first two sections.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Testem, QUnit and RequireJS working together]]></title>
    <link href="http://gbabiars.github.io/blog/2013/09/24/getting-testem-qunit-requirejs-working-together/"/>
    <updated>2013-09-24T19:48:00-07:00</updated>
    <id>http://gbabiars.github.io/blog/2013/09/24/getting-testem-qunit-requirejs-working-together</id>
    <content type="html"><![CDATA[<p>As a big believer in the rapid feedback that continuous gives, I looked into a few of the options in the JavaScript space a few months ago.  At the time, I liked Karma and decided to try it out with some side projects.  It worked great with Ember and QUnit, so I decided to try getting it to work with our existing suite using RequireJS, QUnit and Backbone.  After some time trying to get it working with the adapters, I decided to use Grunt to get something good enough up and moved on.</p>

<p>Fast forward to today and I was once again faced with the similar issue.  I wanted to move a newer project to RequireJS so I went head to head with Karma once again.  After a little more frustration, I decided to try <a href="https://github.com/airportyh/testem">Testem</a>.  It amazed me how little configuration was actually needed.</p>

<h3>Configuring Testem</h3>

<p>The first thing you&rsquo;ll need to do is install testem globally using <code>npm install -g testem</code>.  After that, you&rsquo;ll need to create a testem.json file.  For our case, we want to use the option to specify and actual html test file.  We end up with our testem.json looking like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "test_page": "test.html",
</span><span class='line'>    "src_files": [
</span><span class='line'>      // pattern for files you want to watch
</span><span class='line'>    ],
</span><span class='line'>    "src_files_ignore": [
</span><span class='line'>      // pattern for files you want to ignore
</span><span class='line'>    ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Our test.html file will look like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>    <span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;html&gt;</span>
</span><span class='line'>    <span class="nt">&lt;head&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class='line'>        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;components/qunit/qunit/qunit.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;components/qunit/qunit/qunit.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script&gt;</span>
</span><span class='line'>            <span class="nx">QUnit</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">autostart</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/testem.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>        <span class="nt">&lt;script </span><span class="na">data-main=</span><span class="s">&quot;js/test/test-main&quot;</span> <span class="na">src=</span><span class="s">&quot;components/requirejs/require.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;body&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;qunit&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;qunit-fixture&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing to note here is that we are turning off autostart for QUnit.  This is needed to get our required files to load first.</p>

<h3>Configuring RequireJS</h3>

<p>Next, we need to create our test-main.js file we pointed to in the script tag above.  What we&rsquo;ll need is something like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
</span><span class='line'>        <span class="c1">// put your path, shims, etc. here</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">require</span><span class="p">([</span><span class="s1">&#39;my.test&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">QUnit</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The main part of this is the second require block where I&rsquo;m requiring and starting the tests.  Right now we have our tests statically defined and we are up and running.</p>

<h3>Not there yet</h3>

<p>Getting Testem running with QUnit and RequireJS turned out to be fairly simple, however, one thing we are missing is the autogenerated building of the test file that both Karma and Testem provide out of the box.  I&rsquo;ll have another post soon to discuss some solutions around that using Grunt.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Can We Stop Saying Single Page Apps]]></title>
    <link href="http://gbabiars.github.io/blog/2013/09/15/can-we-stop-saying-single-page-apps/"/>
    <updated>2013-09-15T00:15:00-07:00</updated>
    <id>http://gbabiars.github.io/blog/2013/09/15/can-we-stop-saying-single-page-apps</id>
    <content type="html"><![CDATA[<p>If there is just one phrase in the web development community that I wish could just go away, it would be &ldquo;Single Page Apps&rdquo;.  My big problem with the term can be misleading and uninformative.  It gives no insights into the technology behind the application.  Like HTML5, the term &ldquo;single page app&rdquo; is more of a marketing term than a technical term.</p>

<h3>What&rsquo;s in a name?</h3>

<p>So what exactly is a single page app or SPA?  Typically this means that there is one server rendered page, with the rest of the content being dynamically generated with ajax requests and javascript.  With this description, single page app is pretty acurate.  So then what&rsquo;s the problem?</p>

<h3>And then there were two…</h3>

<p>Let&rsquo;s take a pretty common scenario of having an application that requires logging in.  Let&rsquo;s say that our login page is actually a separate page, but the rest of the app fits the single page model.  Does this mean we no longer qualify as a single page app?  What do we call our app then?</p>

<p>Even if we only have one server rendered page, most SPAs have client side navigation using either push state or hashes.  Really, we have multiple pages, but the routing is done on the client rather than the server.  In this instance, describing something as single page is very misleading.</p>

<h3>It shouldn&rsquo;t be this hard</h3>

<p>There are a lot of alternative names out there.  Ember uses the term &ldquo;ambitious web applications&rdquo; which is pretty good.  There&rsquo;s also &ldquo;javascript web applications&rdquo; or &ldquo;client side javascript application&rdquo; and many more.  These help a little bit, but can&rsquo;t we do better?</p>

<p>When we are building traditional server side MVC applications, we typically describe them using the framework they are built on top of.  When someone talks about their rails app or Django app, we have a solid understanding of what they are talking about.  Why don&rsquo;t we just do this on the client side?  When someone talks about an Ember app or an Angular app we&rsquo;ll have a general understanding of how it was built.</p>

<p>In the end we&rsquo;re just building web applications, so let&rsquo;s just leave it at that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember.js: Resolving Embedded Models in Nested Routes]]></title>
    <link href="http://gbabiars.github.io/blog/2013/08/10/ember-dot-js-resolving-embedded-models-in-nested-routes/"/>
    <updated>2013-08-10T17:31:00-07:00</updated>
    <id>http://gbabiars.github.io/blog/2013/08/10/ember-dot-js-resolving-embedded-models-in-nested-routes</id>
    <content type="html"><![CDATA[<p>I recently ran into a roadblock with Ember and Ember Data where I was trying to access an embedded model for a nested route.  What I wanted to do was return one of the elements of an array in the model from the parent route as my model for the nested route.  The solution ended up being fairly simple.</p>

<p>My route definitions looked as such:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">&#39;editGame&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/editable-games/edit/:editableGame_id&#39;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">&#39;editGameRound&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;/:round&#39;</span> <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And my models were defined as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">EditableGame</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">rounds</span><span class="o">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">hasMany</span><span class="p">(</span><span class="s1">&#39;App.EditableBoard&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">EditableBoard</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">round</span><span class="o">:</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It was easy enough to load the model for the EditGame route, but for the EditGameRound route I wanted to return one of the rounds from the parent EditGame model based on which round was passed into the route.</p>

<p>The model function on Ember.Route gives us the Transition object as a second parameter.  From this transition object, we have access to &ldquo;resolvedModels&rdquo; which includes the resolved model from our parent route.  So to get access to the embedded EditableBoard from the EditableGame model, we just need to access the resolved model by route name:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">roundNames</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="mi">1</span><span class="o">:</span> <span class="s1">&#39;first&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">2</span><span class="o">:</span> <span class="s1">&#39;second&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">EditGameRoundRoute</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">serialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span> <span class="nx">round</span><span class="o">:</span> <span class="nx">roundNames</span><span class="p">[</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;round&#39;</span><span class="p">)]</span> <span class="o">||</span><span class="s1">&#39;final&#39;</span> <span class="p">};</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="nx">transition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">game</span> <span class="o">=</span> <span class="nx">transition</span><span class="p">.</span><span class="nx">resolvedModels</span><span class="p">.</span><span class="nx">editGame</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">round</span> <span class="o">=</span> <span class="nx">params</span><span class="p">.</span><span class="nx">round</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">round</span> <span class="o">===</span> <span class="s1">&#39;first&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">game</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;rounds&#39;</span><span class="p">).</span><span class="nx">objectAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">round</span> <span class="o">===</span> <span class="s1">&#39;second&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">game</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;rounds&#39;</span><span class="p">).</span><span class="nx">objectAt</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that I accessed the game by the parent route&rsquo;s name (editGame).  This made it very simple to find and return my embedded model and return it as the model of the nested route.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Grunt As Your Front End Dev Server]]></title>
    <link href="http://gbabiars.github.io/blog/2013/08/04/using-grunt-as-your-front-end-dev-server/"/>
    <updated>2013-08-04T03:35:00-07:00</updated>
    <id>http://gbabiars.github.io/blog/2013/08/04/using-grunt-as-your-front-end-dev-server</id>
    <content type="html"><![CDATA[<h2>Need for Front End Seperation</h2>

<p>For many large development projects, there is a need to seperate the front and back end development into two different projects.  The benefit here for the front end team is that they can work in html, javascript and css without having to worry about compiling new builds.  One issue that must be faced when doing this is making sure the local development enviroment can both server local static files and also connect to services that ajax calls will be connecting to.  For us, this meant serving up our backbone app while connecting to an api on one of several VMs. Originially, we used XAMPP on each devs machine to serve up the files.  The downsides of this are that it requires each machine to be manually configured and the config is not stored in the projects version control repositiory.</p>

<h2>Using Grunt Instead</h2>

<p>Grunt&rsquo;s wide range of makes it easy to create a dev server to both serve up our static files as well as proxy to our services.  Using <a href="https://github.com/gruntjs/grunt-contrib-connect">grunt-contrib-connect</a>, we created a simple task to serve our project&rsquo;s static files.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">connect</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;static&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">hostname</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">port</span><span class="o">:</span> <span class="mi">8001</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This task just simply serves up static files to localhost:8001 using the folder our Gruntfile.js is in as the root directory.  While this was easy enough, we still need to get it to connect to our api.  In order to do this, we need a proxy server to proxy our local service calls to the correct remote server.  Luckily there is a great project called <a href="https://github.com/drewzboto/grunt-connect-proxy">grunt-connect-proxy</a> that allows us to modify our connect configuration to specify which service calls we want to proxy and to where.  Here is the resulting modifications we&rsquo;ve made.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">connect</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;static&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">hostname</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">port</span><span class="o">:</span> <span class="mi">8001</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">server</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">hostname</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">port</span><span class="o">:</span> <span class="mi">8000</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">middleware</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">connect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="p">[</span><span class="nx">proxySnippet</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">proxies</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="nx">context</span><span class="o">:</span> <span class="s1">&#39;/svc&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;myserviceshost&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">port</span><span class="o">:</span> <span class="mi">8080</span>               
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="nx">context</span><span class="o">:</span> <span class="s1">&#39;/api&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;myapihost&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">port</span><span class="o">:</span> <span class="mi">9080</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="nx">context</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">port</span><span class="o">:</span> <span class="mi">8001</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the top of our Gruntfile, we declare our proxySnippit:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">proxySnippet</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;grunt-connect-proxy/lib/utils&#39;</span><span class="p">).</span><span class="nx">proxyRequest</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a few things to notice in our config.  First, we&rsquo;ve added a second connect task called server.  This will run at localhost:8000 and will encompass both our static files and our service urls.  We add a middleware function to make sure we run the proxySnippet provided by grunt-connect-proxy.  We&rsquo;ve added a proxies array which defines what urls are proxied where.  We&rsquo;ve defined three proxies.  Calls to <a href="http://localhost:8000/svc*">http://localhost:8000/svc*</a> will be proxied to <a href="http://myserviceshost:8080/svc.">http://myserviceshost:8080/svc.</a>  Calls to <a href="http://localhost:8000/api*">http://localhost:8000/api*</a> will be proxied to <a href="http://localhost:9080/api.">http://localhost:9080/api.</a>  Finally, calls to <a href="http://localhost:8000/*">http://localhost:8000/*</a> will be proxied to <a href="http://localhost:8001.">http://localhost:8001.</a>  This last proxy makes sure that our static files are served from our &ldquo;static&rdquo; connect task.  Notice that the context property in each proxy tells us which urls to look for.  I have noticed that order is important here, going from highest priority to lowest.  We define &lsquo;/&rsquo; last so that the other service calls will take priority.</p>

<p>Now that we have configured our connect task, we need to register a new task that will put this all together.  Here is what it will look like:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;server&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;connect:static&#39;</span><span class="p">,</span> <span class="s1">&#39;configureProxies:server&#39;</span><span class="p">,</span> <span class="s1">&#39;connect:server&#39;</span><span class="p">,</span> <span class="s1">&#39;watch&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running <code>grunt server</code> will start our static server at localhost:8001, configure our proxies defined in our proxies options array, then start the server at localhost:8000.  Lastly we add a watch task using <a href="https://github.com/gruntjs/grunt-contrib-watch">grunt-contrib-watch</a> to keep our server running.  Now if we go to <a href="http://localhost:8000,">http://localhost:8000,</a> we will have our development server with our local html/javascript/css files while still using the correct remote service calls!  And we can commit this to source control so no manual configuration is needed.</p>

<h2>Taking it Further</h2>

<p>While connecting to remote services was our main goal, we can also create new configurations to cover other use cases.  For example, during new development our remote server may not have services that we need.  Rather than wait for the backend to implement these to start our development, we instead point to fake servers running locally (using node).  Using the same configuration logic as we had for our server task, we can create a fakeServer task that proxies to our fake local services.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// in the connect task...</span>
</span><span class='line'>  <span class="nx">fakeServer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">hostname</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">port</span><span class="o">:</span> <span class="mi">8000</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">middleware</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">connect</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="p">[</span><span class="nx">proxySnippet</span><span class="p">];</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">proxies</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="nx">context</span><span class="o">:</span> <span class="s1">&#39;/svc&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">port</span><span class="o">:</span> <span class="mi">8080</span>               
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="nx">context</span><span class="o">:</span> <span class="s1">&#39;/api&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">port</span><span class="o">:</span> <span class="mi">9080</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="nx">context</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">port</span><span class="o">:</span> <span class="mi">8001</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'><span class="c1">// we register the fakeServer task</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;fakeServer&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;connect:static&#39;</span><span class="p">,</span> <span class="s1">&#39;configureProxies:fakeServer&#39;</span><span class="p">,</span> <span class="s1">&#39;connect:fakeServer&#39;</span><span class="p">,</span> <span class="s1">&#39;watch&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if we run <code>grunt fakeServer</code> we can use the fake services to develop locally, then when the real backend services are ready, we can test against them.  The added benefit here is that we may want to test many different use cases such as an endpoint returning no data or error handling.  This is really easy to do on our fake server without affecting production code.</p>

<h2>Putting It All Together</h2>

<p>To see the full example, check out this <a href="https://gist.github.com/gbabiars/6149943">gist</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Myths of Backbone.js]]></title>
    <link href="http://gbabiars.github.io/blog/2013/08/01/the-myths-of-backbone-dot-js/"/>
    <updated>2013-08-01T20:00:00-07:00</updated>
    <id>http://gbabiars.github.io/blog/2013/08/01/the-myths-of-backbone-dot-js</id>
    <content type="html"><![CDATA[<p>When it comes to building javascript centric web apps, it&rsquo;s hard to argue with the popularity of Backbone.  It has played a big part in shifting client side javascript apps from being jQuery spaghetti to well structured, more maintainable pieces of software.  It has helped move developers away from &ldquo;truth in DOM&rdquo; and towards keeping record stores in the javascript application itself.  While it has done so much, an amazing achievement for such a relatively small library, there is a lot of misinformation about Backbone that exists in the web community.</p>

<p>As a preface, I do use Backbone on a daily basis and both appreciate it for the simplicity and functionality it provides, while also wishing for more at times.  Developers who have used Backbone on a regular basis and have built non-trivial applications have also felt this pain.  These are simply some of the myths I feel exist about Backbone.</p>

<h2>It is a framework</h2>

<p>If you read any blog posts or see any getting started guides, you&rsquo;ll more than likely hear Backbone referred to as a &ldquo;framework&rdquo;.  This is something I disagree with strongly, as Backbone is much more of a library than a framework.  This is not a knock on Backbone, in fact Backbone is a library that gives you the pieces to create your own framework.  It has many of the same components you&rsquo;d expect to see in a framework (models, views, router), but if you take away the router, you&rsquo;ll see what you are given are building blocks.  Frameworks will wire things up for you, whether through configuration or convention, but Backbone leaves it up to you to figure out how to wire up your application.  This allows it to be very flexible, but also places great responsibilities on the developers using it.</p>

<h2>It is easy to learn</h2>

<p>This is one of the most common claims when people evaluate Backbone.  There is no question that the core of Backbone, particularly the models, collections and views, is easy to learn.  The difficulty instead lies in figuring out how to get all the pieces to work together.  Backbone&rsquo;s difficulty ramps up as your application get&rsquo;s more complex.  How do you manage child views?  What about aggregates that depend on multiple collections?  What about cleaning up your views to prevent zombie events?  Backbone&rsquo;s unopinionated approach gives you very little guidance on how to solve these situations, therefore it is up to the developer to learn patterns used in the Backbone community or try to figure it out themselves.  One great thing about Backbone&rsquo;s popularity is that most of these problems are solved and many libraries exist that do the work for you (i.e. <a href="http://marionettejs.com/">Marrionette.js</a>).</p>

<h2>It is lightweight</h2>

<p>The library itself is only 6.3k, but it lacks any boilerplate code.  This means you will either be writing this yourself or using 3rd party libraries.  Much of this depends on the use case, but you can often end up with the same total size application with Backbone as you would had you used one of the larger frameworks.</p>

<h2>It is better/worse than…</h2>

<p>Insert a framework or library here.  Backbone vs. Angular? or vs. Ember?  What about compared to Knockout?  It has become very common to see comparisons between the different libraries and frameworks looking for a winner.  Unfortunately most of these comparisons are apples and oranges.  Besides that, there is plenty of room for many solutions to the wide range application needs that exist.  It is important to understand the different features and pitfalls of using each solution so that you or your team can make the best choice for your projects.</p>

<h2>…but in the end…</h2>

<p>Backbone is still a good choice when building client side javascript applications, but you should understand what it gives you and what you have to do yourself.  Luckily Backbone&rsquo;s popularity has led to a large plugin ecosystem that solve most of the common problems.  In the end, if you are going to use Backbone, expect to have to make some serious architectural decisions and write boilerplate code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write Prefix-free CSS using Grunt]]></title>
    <link href="http://gbabiars.github.io/blog/2013/07/21/write-prefix-free-css-using-grunt/"/>
    <updated>2013-07-21T14:30:00-07:00</updated>
    <id>http://gbabiars.github.io/blog/2013/07/21/write-prefix-free-css-using-grunt</id>
    <content type="html"><![CDATA[<p>One of the most painful parts about using newer CSS3 features is the amount of prefixed styles that must be written in order to support the wide range of browsers out there.  There are many ways to alleviate this pain, including preprocessor mixins.  One of the best ways I&rsquo;ve found to eliminate this altogether is to have the prefix generation automated into your build process.  By moving prefixing to this automation step, we can write more maintainable css that will also be easier to update with future browser changes.</p>

<h2>Automating using Grunt</h2>

<p>My build tool of choice is Grunt, particularly because of the large number of task plugins available.  One such plugin is available for automating prefix generation of css, called <a href="https://github.com/nDmitry/grunt-autoprefixer">grunt-autoprefixer</a>.  To make use of it, we simply need to point to the files we want to generate and the prefixed css will be generated.</p>

<p>Our Grunt snippet:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">autoprefixer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">browsers</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;last 2 versions&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">files</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;css/dist/styles.css&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;css/src/styles.css&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example of css with flexbox:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.column</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The resulting css generated by autoprefixer:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.column</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">flex</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">flexbox</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the css we write is much simpler than the generated css and we no longer have to worry ourselves with maintaining prefixes as browser support changes.  Updating our css is as simple as rerunning our Grunt task.</p>

<p>You can modify which browsers are supported by changing the browser array in the grunt-autoprefixer options.  For more documentation, check out the <a href="https://github.com/nDmitry/grunt-autoprefixer">github repo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reusable Formatting Using Ember Handlebars Helpers]]></title>
    <link href="http://gbabiars.github.io/blog/2013/06/16/reusable-formatting-using-ember-handlebars-helpers/"/>
    <updated>2013-06-16T20:00:00-07:00</updated>
    <id>http://gbabiars.github.io/blog/2013/06/16/reusable-formatting-using-ember-handlebars-helpers</id>
    <content type="html"><![CDATA[<p>One of the great things about Ember is that it uses Handlebars as its default template engine.  Handlebars allows you to create a very declarative yet powerful UI through it&rsquo;s built in helpers like <code>{{each}}</code> and <code>{{if}}</code>.  Ember has also extended Handlebars with helpers like <code>{{view}}</code> and <code>{{render}}</code> as well.  While these helpers go a long way, Ember allows us to easily create our own custom helpers.  This allows us to build a UI that is very expressive while also DRYing up our application.  A great way to utilize this feature is by moving common formatting of values and types into helpers.</p>

<h3>Date Formatting</h3>

<p>To demonstrate how this can be beneficial, let&rsquo;s take a look at a pretty common task in applications: formatting dates.  The formatting logic can often be spread throughout the application without consistency.  We can clean this up by moving the formatting out of the models, controllers and views and into our custom helpers which we can reuse in different contexts.</p>

<p>For this example, we&rsquo;ll take the idea of a simple bulletin board system with Posts and Users.  The application will have three views: list of Posts, Post details and User details.  Our models will look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">User</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">createdAt</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">lastOnlineAt</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">body</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">createdAt</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">lastUpdatedAt</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">lastReadAt</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">authorName</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">authorId</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>For each post and user we have two dates.  We want to render these dates in our templates.</p>

<h3>Let&rsquo;s Update our Models</h3>

<p>Before we jump into helpers, let&rsquo;s handle the formatting within our models.  We can create computed properties on the model, such as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="nx">createdAtPrettyFormat</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">moment</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;createdAt&#39;</span><span class="p">)).</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;MMM Do YYYY h:mm A&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;createdAt&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>but we&rsquo;d quickly be duplicating our code.  First, if we decide we want to have the same date formatted differently in different views (i.e. having it without the time on the posts list, but with on the post details) we would have to create a different computed property for each format.  Secondly, we may have the same format for multiple dates and we would have to create different computed properties for each.</p>

<h3>Helpers to the Rescue</h3>

<p>A better solution is to move the formatting to a Handlebars helper.  For this example we are going to create two different helpers, one for relative dates and one for the full formatted date.  First we need to register our helpers:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">Em</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helper</span><span class="p">(</span><span class="s1">&#39;relativeDate&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">moment</span><span class="p">(</span><span class="nx">value</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Em</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helper</span><span class="p">(</span><span class="s1">&#39;prettyDate&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">moment</span><span class="p">(</span><span class="nx">value</span><span class="p">).</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;MMM Do, YYYY h:mm A&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The helper method takes in two parameters: the name of the helper and and the value that we want to format.  Typically the logic here should be very simple, in this case we are just returning the date value as a formatted string.</p>

<p>Next, we can use utilize these helpers within our templates.</p>

<p>Posts List:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  {{#each model}}
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>{{#linkTo post this}}{{title}}{{/linkTo}} - {{relativeDate createdAt}}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  {{/each}}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Post Details:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;h3&gt;</span>{{title}}<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>Posted by: {{#linkTo user authorId}}{{authorName}}{{/linkTo}} at {{prettyDate createdAt}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>{{body}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>Last Updated {{relativeDate lastUpdatedAt}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>User Details:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;h3&gt;</span>{{name}}<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>User since {{prettyDate createdAt}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>Last online {{relativeDate lastOnlineAt}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>Even though these are very simple views, we have gained a lot of reuse and provided consistency to the formats.  An added benefit is that the markup is very readable and obvious what format each date will be rendered as.  And the best part is that the values are bound, so when a date is updated in our model the formatted date is updated too.</p>

<h3>Number Formatting</h3>

<p>Formatting of numerical values is another place where helpers make sense, whether it is currency, percentages or placing commas. Here an example of a helper that displays as percent:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">Em</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helper</span><span class="p">(</span><span class="s1">&#39;percent&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">value</span> <span class="o">+</span> <span class="s1">&#39; %&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Default Values</h3>

<p>Another scenario is when we want to display a default message or value in place of a null or empty value.  This is easily done using a helper like the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">Em</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helper</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s1">&#39;There is no value to display.&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>And More&hellip;</h3>

<p>There may be many more domain specific use cases in your applications as well.  The best part is that they are usually trivial to implement.</p>

<p>The repo for the date examples can be seen <a href="https://github.com/gbabiars/bulletin-board-ember-helpers">here</a>.</p>

<p>For more information on Handlebars helpers, check out the <a href="http://emberjs.com/guides/templates/writing-helpers/">documentation</a>.</p>
]]></content>
  </entry>
  
</feed>
